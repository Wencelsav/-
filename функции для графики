

HWND hWnd = GetConsoleWindow();
	HDC hDC = GetDC(hWnd);
	RECT temp;
	GetClientRect(hWnd, &temp);
	HDC hBufferDC = CreateCompatibleDC(hDC);
	HBITMAP hBufferBmp = CreateBitmap(temp.right, temp.bottom, 1, 32, NULL);
	HBITMAP hBufferBmpOld = (HBITMAP)SelectObject(hBufferDC, hBufferBmp);
	HPEN hPen= CreatePen(PS_SOLID, 1, RGB(0, 0, 0));
	HBRUSH hBrush = CreateSolidBrush(RGB(0, 0, 0));
	HBRUSH hOldBrush = (HBRUSH)SelectObject(hBufferDC, hBrush);
	RECT circle = { 0,0,25,25 };
	HPEN hOldPen = (HPEN)SelectObject(hBufferDC, hPen);
	if (state == State::BLACK) {
		hBrush = CreateSolidBrush(RGB(0, 0, 0));
		hPen = CreatePen(PS_SOLID, 1, RGB(0, 0, 0));
		hOldBrush = (HBRUSH)SelectObject(hBufferDC, hBrush);
		hOldPen = (HPEN)SelectObject(hBufferDC, hPen);
		ReleaseDC(hWnd, hDC);
	}
	if(state== State::WHITE){
		hBrush = CreateSolidBrush(RGB(255, 255, 255));
		hPen = CreatePen(PS_SOLID, 1, RGB(255, 255, 255));
		hOldBrush = (HBRUSH)SelectObject(hBufferDC, hBrush);
		hOldPen = (HPEN)SelectObject(hBufferDC, hPen);
		ReleaseDC(hWnd, hDC);
	}
	size_t step_h = 3, step_v = 3;
	while (!GetAsyncKeyState(VK_ESCAPE)) {

		if (GetAsyncKeyState(VK_LEFT)) {
			circle.left -= step_h;
			circle.right -= step_h;
		}
		if (GetAsyncKeyState(VK_RIGHT)) {
			circle.left += step_h;
			circle.right += step_h;
		}
		if (GetAsyncKeyState(VK_DOWN)) {
			circle.top += step_v;
			circle.bottom += step_v;
		}
		if (GetAsyncKeyState(VK_UP)) {
			circle.top -= step_v;
			circle.bottom -= step_v;
		}
		Ellipse(hBufferDC, circle.left, circle.top, circle.right, circle.bottom);
		BitBlt(hDC, m_leftX, m_leftY, m_leftX + m_cellSize * sqrt(board.size()), m_leftY + m_cellSize * sqrt(board.size()), hBufferDC, 0, 0, SRCCOPY);
		Sleep(10);
	}
	SelectObject(hBufferDC, hOldBrush);
	SelectObject(hBufferDC, hOldPen);
	SelectObject(hBufferDC, hBufferBmpOld);
	DeleteObject(hBrush);
	DeleteObject(hPen);
	DeleteObject(hBufferBmp);
	DeleteDC(hBufferDC);
	ReleaseDC(hWnd, hDC);
	return 0; ;//?????


HWND m_ConsoleWindow = GetConsoleWindow();
	HDC m_hDC = GetDC(m_ConsoleWindow);
	HDC hBufferDC = CreateCompatibleDC(m_hDC);
	const int m_leftX = 150;
	const int m_leftY = 15;
	const int m_cellSize = 50;

	if ((j + i) % 2 == 0)
				SelectObject(m_hDC, CreateSolidBrush(RGB(77, 75, 34)));
			else
				SelectObject(m_hDC, CreateSolidBrush(RGB(81, 13, 22)));
			Rectangle(m_hDC, m_leftX + j * m_cellSize, m_leftY + i * m_cellSize, m_leftX + j * m_cellSize + m_cellSize, m_leftY + i * m_cellSize + m_cellSize);



